{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\src\\\\containers\\\\Search\\\\Search.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Search.css';\nimport { useHistory } from 'react-router-dom';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { CSSTransition } from 'react-transition-group';\n\nconst Search = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        searchBox = _useState2[0],\n        setSearchBox = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        searchIcon = _useState4[0],\n        setSearchIcon = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        searchText = _useState6[0],\n        setSearchText = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        searchChanged = _useState8[0],\n        setSearchChanged = _useState8[1];\n\n  const searchBoxRef = useRef();\n  const history = useHistory();\n  useEffect(() => {\n    document.addEventListener('mousedown', outsideSearchClickListener, false);\n    return () => {\n      document.removeEventListener('mousedown', outsideSearchClickListener, false);\n    };\n  }, []);\n  useEffect(() => {\n    if (searchText.length > 0) {\n      history.push({\n        pathname: '/search',\n        search: \"?q=\".concat(searchText)\n      });\n    } else if (searchChanged && searchText.length === 0) {\n      history.replace({\n        pathname: '/browse'\n      });\n    }\n  }, [history, searchText, searchChanged]);\n\n  const searchClickHandler = () => {\n    setSearchBox(true);\n  };\n\n  const outsideSearchClickListener = event => {\n    if (searchBoxRef.current && !searchBoxRef.current.contains(event.target)) {\n      setSearchBox(false);\n    }\n  };\n\n  const searchTextChangeHandler = event => {\n    const textValue = event.target.value;\n    setSearchText(textValue);\n    setSearchChanged(true);\n  };\n\n  const clickCrossHandler = () => {\n    setSearchText('');\n  };\n\n  const searchBar = /*#__PURE__*/React.createElement(CSSTransition, {\n    in: searchBox,\n    classNames: \"search-animation\",\n    timeout: 500,\n    unmountOnExit: true,\n    onEnter: () => setSearchIcon(false),\n    onExiting: () => setSearchBox(false),\n    onExited: () => setSearchIcon(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Holder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    className: \"Icon\",\n    size: \"lg\",\n    icon: faSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    autoFocus: true,\n    placeholder: \"Titles, people, genres\",\n    onChange: searchTextChangeHandler,\n    value: searchText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }), searchText.length > 0 ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    onClick: clickCrossHandler,\n    size: \"lg\",\n    icon: faTimes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }) : null));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"SearchBox\",\n    onClick: searchClickHandler,\n    ref: searchBoxRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, searchIcon && /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    size: \"lg\",\n    icon: faSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 28\n    }\n  }), searchBar);\n};\n\nexport default Search;","map":{"version":3,"sources":["C:/Users/aftab/Desktop/netflixClone/Netflix-Clone/src/containers/Search/Search.js"],"names":["React","useState","useEffect","useRef","useHistory","FontAwesomeIcon","faSearch","faTimes","CSSTransition","Search","searchBox","setSearchBox","searchIcon","setSearchIcon","searchText","setSearchText","searchChanged","setSearchChanged","searchBoxRef","history","document","addEventListener","outsideSearchClickListener","removeEventListener","length","push","pathname","search","replace","searchClickHandler","event","current","contains","target","searchTextChangeHandler","textValue","value","clickCrossHandler","searchBar"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport './Search.css'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { CSSTransition } from 'react-transition-group'\r\n\r\nconst Search = () => {\r\n    const [searchBox, setSearchBox] = useState(false)\r\n    const [searchIcon, setSearchIcon] = useState(true)\r\n\r\n    const [searchText, setSearchText] = useState('')\r\n    const [searchChanged, setSearchChanged] = useState(false)\r\n    const searchBoxRef = useRef()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', outsideSearchClickListener, false)\r\n        return () => {\r\n            document.removeEventListener('mousedown', outsideSearchClickListener, false)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (searchText.length > 0) {\r\n            history.push({\r\n                pathname: '/search',\r\n                search: `?q=${searchText}`\r\n            })\r\n\r\n        } else if (searchChanged && searchText.length === 0) {\r\n            history.replace({ pathname: '/browse' })\r\n        }\r\n    }, [history, searchText, searchChanged])\r\n\r\n    const searchClickHandler = () => {\r\n        setSearchBox(true)\r\n    }\r\n\r\n    const outsideSearchClickListener = event => {\r\n        if (searchBoxRef.current && !searchBoxRef.current.contains(event.target)) {\r\n            setSearchBox(false)\r\n        }\r\n    }\r\n\r\n    const searchTextChangeHandler = event => {\r\n        const textValue = event.target.value\r\n        setSearchText(textValue)\r\n        setSearchChanged(true)\r\n    }\r\n\r\n    const clickCrossHandler = () => {\r\n        setSearchText('')\r\n    }\r\n\r\n    const searchBar = (\r\n        <CSSTransition in={searchBox} classNames=\"search-animation\" timeout={500} unmountOnExit\r\n            onEnter={() => setSearchIcon(false)}\r\n            onExiting={() => setSearchBox(false)}\r\n            onExited={() => setSearchIcon(true)}>\r\n            <div className=\"Holder\">\r\n                <FontAwesomeIcon className=\"Icon\" size=\"lg\" icon={faSearch} />\r\n                <input autoFocus placeholder=\"Titles, people, genres\"\r\n                    onChange={searchTextChangeHandler} value={searchText} />\r\n                {searchText.length > 0 ?\r\n                    <FontAwesomeIcon onClick={clickCrossHandler} size=\"lg\" icon={faTimes} /> : null\r\n                }\r\n            </div>\r\n        </CSSTransition>\r\n    )\r\n\r\n    return (\r\n        <div className=\"SearchBox\" onClick={searchClickHandler} ref={searchBoxRef}>\r\n            {searchIcon && <FontAwesomeIcon size=\"lg\" icon={faSearch} />}\r\n            {searchBar}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search"]},"metadata":{},"sourceType":"module"}