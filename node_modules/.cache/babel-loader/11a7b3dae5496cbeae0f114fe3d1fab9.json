{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'baseAxios';\nexport const fetchLatestVideos = createAsyncThunk('latestVideoSlice/fetchLatestVideos', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, {\n    rejectWithValue\n  }) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return Promise.all([axios.get(\"discover/movie?api_key=\".concat(process.env.REACT_APP_MOVIEDB_API_KEY, \"&language=en-US&sort_by=primary_release_date.desc&include_adult=false&include_video=false&page=1&vote_average.gte=6\")).then(response => ({\n            title: \"Latest Movies\",\n            videos: response.data.results\n          })), axios.get(\"discover/tv?api_key=\".concat(process.env.REACT_APP_MOVIEDB_API_KEY, \"&language=en-US&sort_by=first_air_date.desc&page=1&timezone=America%2FNew_York&vote_average.gte=6&include_null_first_air_dates=false\")).then(response => ({\n            title: \"Latest TV Shows\",\n            videos: response.data.results\n          }))]);\n\n        case 3:\n          response = _context.sent;\n          return _context.abrupt(\"return\", response);\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n\n          if (_context.t0.response) {\n            _context.next = 11;\n            break;\n          }\n\n          throw _context.t0;\n\n        case 11:\n          return _context.abrupt(\"return\", rejectWithValue(_context.t0.response.data));\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nconst initialState = {\n  latestVideos: [],\n  status: 'idle',\n  error: null\n};\nconst latestVideoSlice = createSlice({\n  name: 'latestVideos',\n  initialState: initialState,\n  extraReducers: {\n    [fetchLatestVideos.pending]: (state, _) => {\n      state.status = 'loading';\n    },\n    [fetchLatestVideos.fulfilled]: (state, action) => {\n      action.payload.forEach(latestVideo => {\n        state.latestVideos.push(_objectSpread({}, latestVideo));\n      });\n      state.status = 'success';\n    },\n    [fetchLatestVideos.rejected]: (state, action) => {\n      state.status = 'error';\n\n      if (action.payload) {\n        state.error = action.payload.status_message;\n      } else {\n        state.error = action.error;\n      }\n    }\n  }\n});\nexport const selectLatestVideos = state => state.latestVideos;\nexport default latestVideoSlice.reducer;","map":{"version":3,"sources":["C:/Users/aftab/Desktop/netflixClone/Netflix-Clone/src/store/reducers/slices/latestVideoSlice.js"],"names":["createSlice","createAsyncThunk","axios","fetchLatestVideos","_","rejectWithValue","Promise","all","get","process","env","REACT_APP_MOVIEDB_API_KEY","then","response","title","videos","data","results","initialState","latestVideos","status","error","latestVideoSlice","name","extraReducers","pending","state","fulfilled","action","payload","forEach","latestVideo","push","rejected","status_message","selectLatestVideos","reducer"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,WAAlB;AAEA,OAAO,MAAMC,iBAAiB,GAAGF,gBAAgB,CAAC,oCAAD;AAAA,sEAC7C,iBAAOG,CAAP,EAAU;AAAEC,IAAAA;AAAF,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAE+BC,OAAO,CAACC,GAAR,CAAY,CAC/BL,KAAK,CAACM,GAAN,kCAAoCC,OAAO,CAACC,GAAR,CAAYC,yBAAhD,0HACKC,IADL,CACUC,QAAQ,KAAK;AAAEC,YAAAA,KAAK,EAAE,eAAT;AAA0BC,YAAAA,MAAM,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAAhD,WAAL,CADlB,CAD+B,EAG/Bf,KAAK,CAACM,GAAN,+BAAiCC,OAAO,CAACC,GAAR,CAAYC,yBAA7C,2IACKC,IADL,CACUC,QAAQ,KAAK;AAAEC,YAAAA,KAAK,EAAE,iBAAT;AAA4BC,YAAAA,MAAM,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAAlD,WAAL,CADlB,CAH+B,CAAZ,CAF/B;;AAAA;AAEcJ,UAAAA,QAFd;AAAA,2CASeA,QATf;;AAAA;AAAA;AAAA;;AAAA,cAWa,YAAMA,QAXnB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,2CAeeR,eAAe,CAAC,YAAMQ,QAAN,CAAeG,IAAhB,CAf9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAD6C;;AAAA;AAAA;AAAA;AAAA,IAA1C;AAoBP,MAAME,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE,EADG;AAEjBC,EAAAA,MAAM,EAAE,MAFS;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAMA,MAAMC,gBAAgB,GAAGtB,WAAW,CAAC;AACjCuB,EAAAA,IAAI,EAAE,cAD2B;AAEjCL,EAAAA,YAAY,EAAEA,YAFmB;AAGjCM,EAAAA,aAAa,EAAE;AACX,KAACrB,iBAAiB,CAACsB,OAAnB,GAA6B,CAACC,KAAD,EAAQtB,CAAR,KAAc;AACvCsB,MAAAA,KAAK,CAACN,MAAN,GAAe,SAAf;AACH,KAHU;AAKX,KAACjB,iBAAiB,CAACwB,SAAnB,GAA+B,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC9CA,MAAAA,MAAM,CAACC,OAAP,CAAeC,OAAf,CAAuBC,WAAW,IAAI;AAClCL,QAAAA,KAAK,CAACP,YAAN,CAAmBa,IAAnB,mBAA6BD,WAA7B;AACH,OAFD;AAIAL,MAAAA,KAAK,CAACN,MAAN,GAAe,SAAf;AACH,KAXU;AAaX,KAACjB,iBAAiB,CAAC8B,QAAnB,GAA8B,CAACP,KAAD,EAAQE,MAAR,KAAmB;AAC7CF,MAAAA,KAAK,CAACN,MAAN,GAAe,OAAf;;AACA,UAAIQ,MAAM,CAACC,OAAX,EAAoB;AAChBH,QAAAA,KAAK,CAACL,KAAN,GAAcO,MAAM,CAACC,OAAP,CAAeK,cAA7B;AACH,OAFD,MAEO;AACHR,QAAAA,KAAK,CAACL,KAAN,GAAcO,MAAM,CAACP,KAArB;AACH;AACJ;AApBU;AAHkB,CAAD,CAApC;AA2BA,OAAO,MAAMc,kBAAkB,GAAGT,KAAK,IAAIA,KAAK,CAACP,YAA1C;AAEP,eAAeG,gBAAgB,CAACc,OAAhC","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport axios from 'baseAxios'\r\n\r\nexport const fetchLatestVideos = createAsyncThunk('latestVideoSlice/fetchLatestVideos',\r\n    async (_, { rejectWithValue }) => {\r\n        try {\r\n            const response = await Promise.all([\r\n                axios.get(`discover/movie?api_key=${process.env.REACT_APP_MOVIEDB_API_KEY}&language=en-US&sort_by=primary_release_date.desc&include_adult=false&include_video=false&page=1&vote_average.gte=6`)\r\n                    .then(response => ({ title: \"Latest Movies\", videos: response.data.results })),\r\n                axios.get(`discover/tv?api_key=${process.env.REACT_APP_MOVIEDB_API_KEY}&language=en-US&sort_by=first_air_date.desc&page=1&timezone=America%2FNew_York&vote_average.gte=6&include_null_first_air_dates=false`)\r\n                    .then(response => ({ title: \"Latest TV Shows\", videos: response.data.results }))\r\n            ])\r\n\r\n            return response\r\n        } catch (error) {\r\n            if (!error.response) {\r\n                throw error\r\n            }\r\n\r\n            return rejectWithValue(error.response.data)\r\n        }\r\n    })\r\n\r\nconst initialState = {\r\n    latestVideos: [],\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nconst latestVideoSlice = createSlice({\r\n    name: 'latestVideos',\r\n    initialState: initialState,\r\n    extraReducers: {\r\n        [fetchLatestVideos.pending]: (state, _) => {\r\n            state.status = 'loading'\r\n        },\r\n\r\n        [fetchLatestVideos.fulfilled]: (state, action) => {\r\n            action.payload.forEach(latestVideo => {\r\n                state.latestVideos.push({ ...latestVideo })\r\n            })\r\n\r\n            state.status = 'success'\r\n        },\r\n\r\n        [fetchLatestVideos.rejected]: (state, action) => {\r\n            state.status = 'error'\r\n            if (action.payload) {\r\n                state.error = action.payload.status_message\r\n            } else {\r\n                state.error = action.error\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const selectLatestVideos = state => state.latestVideos\r\n\r\nexport default latestVideoSlice.reducer"]},"metadata":{},"sourceType":"module"}