{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'baseAxios';\nimport { genreTopVideoTransformation } from 'utils/transformations';\n\nconst fetchMovieGenres = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return axios.get(\"genre/movie/list?api_key=\".concat(process.env.REACT_APP_MOVIEDB_API_KEY, \"&language=en-US\"));\n\n        case 3:\n          response = _context.sent;\n          return _context.abrupt(\"return\", response.data.genres);\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          throw new Error(_context.t0);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n\n  return function fetchMovieGenres() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport const fetchMoviesByGenre = createAsyncThunk('moviesByGenreSlice/fetchMoviesByGenre', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_, {\n    rejectWithValue\n  }) {\n    var genres;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return fetchMovieGenres();\n\n        case 3:\n          genres = _context2.sent;\n          _context2.next = 6;\n          return genreTopVideoTransformation(genres, 'movie');\n\n        case 6:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n\n          if (_context2.t0.response) {\n            _context2.next = 13;\n            break;\n          }\n\n          throw _context2.t0;\n\n        case 13:\n          return _context2.abrupt(\"return\", rejectWithValue(_context2.t0.response.data));\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[0, 9]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nconst initalState = {\n  genres: [],\n  status: 'idle',\n  error: null\n};\nconst moviesByGenreSlice = createSlice({\n  name: 'moviesByGenre',\n  initialState: initalState,\n  extraReducers: {\n    [fetchMoviesByGenre.pending]: (state, _) => {\n      state.status = 'loading';\n    },\n    [fetchMoviesByGenre.fulfilled]: (state, action) => {\n      action.payload.forEach(genre => {\n        state.genres.push(_objectSpread({}, genre));\n      });\n      state.status = 'success';\n    },\n    [fetchMoviesByGenre.rejected]: (state, action) => {\n      state.status = 'error';\n\n      if (action.payload) {\n        state.error = action.payload.status_message;\n      } else {\n        state.error = action.error;\n      }\n    }\n  }\n});\nexport const selectMoviesByGenre = state => state.moviesByGenre;\nexport default moviesByGenreSlice.reducer;","map":{"version":3,"sources":["C:/Users/aftab/Desktop/netflixClone/Netflix-Clone/src/store/reducers/slices/moviesByGenreSlice.js"],"names":["createSlice","createAsyncThunk","axios","genreTopVideoTransformation","fetchMovieGenres","get","process","env","REACT_APP_MOVIEDB_API_KEY","response","data","genres","Error","fetchMoviesByGenre","_","rejectWithValue","initalState","status","error","moviesByGenreSlice","name","initialState","extraReducers","pending","state","fulfilled","action","payload","forEach","genre","push","rejected","status_message","selectMoviesByGenre","moviesByGenre","reducer"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,SAASC,2BAAT,QAA4C,uBAA5C;;AAEA,MAAMC,gBAAgB;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEMF,KAAK,CAACG,GAAN,oCACSC,OAAO,CAACC,GAAR,CAAYC,yBADrB,qBAFN;;AAAA;AAEXC,UAAAA,QAFW;AAAA,2CAMVA,QAAQ,CAACC,IAAT,CAAcC,MANJ;;AAAA;AAAA;AAAA;AAAA,gBAQX,IAAIC,KAAJ,aARW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBR,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;AAYA,OAAO,MAAMS,kBAAkB,GAAGZ,gBAAgB,CAAC,uCAAD;AAAA,uEAC9C,kBAAOa,CAAP,EAAU;AAAEC,IAAAA;AAAF,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAE6BX,gBAAgB,EAF7C;;AAAA;AAEcO,UAAAA,MAFd;AAAA;AAAA,iBAGqBR,2BAA2B,CAACQ,MAAD,EAAS,OAAT,CAHhD;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,cAKa,aAAMF,QALnB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,4CAQeM,eAAe,CAAC,aAAMN,QAAN,CAAeC,IAAhB,CAR9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAD8C;;AAAA;AAAA;AAAA;AAAA,IAA3C;AAcP,MAAMM,WAAW,GAAG;AAChBL,EAAAA,MAAM,EAAE,EADQ;AAEhBM,EAAAA,MAAM,EAAE,MAFQ;AAGhBC,EAAAA,KAAK,EAAE;AAHS,CAApB;AAMA,MAAMC,kBAAkB,GAAGnB,WAAW,CAAC;AACnCoB,EAAAA,IAAI,EAAE,eAD6B;AAEnCC,EAAAA,YAAY,EAAEL,WAFqB;AAGnCM,EAAAA,aAAa,EAAE;AACX,KAACT,kBAAkB,CAACU,OAApB,GAA8B,CAACC,KAAD,EAAQV,CAAR,KAAc;AACxCU,MAAAA,KAAK,CAACP,MAAN,GAAe,SAAf;AACH,KAHU;AAKX,KAACJ,kBAAkB,CAACY,SAApB,GAAgC,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC/CA,MAAAA,MAAM,CAACC,OAAP,CAAeC,OAAf,CAAuBC,KAAK,IAAI;AAC5BL,QAAAA,KAAK,CAACb,MAAN,CAAamB,IAAb,mBAAuBD,KAAvB;AACH,OAFD;AAIAL,MAAAA,KAAK,CAACP,MAAN,GAAe,SAAf;AACH,KAXU;AAaX,KAACJ,kBAAkB,CAACkB,QAApB,GAA+B,CAACP,KAAD,EAAQE,MAAR,KAAmB;AAC9CF,MAAAA,KAAK,CAACP,MAAN,GAAe,OAAf;;AACA,UAAIS,MAAM,CAACC,OAAX,EAAoB;AAChBH,QAAAA,KAAK,CAACN,KAAN,GAAcQ,MAAM,CAACC,OAAP,CAAeK,cAA7B;AACH,OAFD,MAEO;AACHR,QAAAA,KAAK,CAACN,KAAN,GAAcQ,MAAM,CAACR,KAArB;AACH;AACJ;AApBU;AAHoB,CAAD,CAAtC;AA2BA,OAAO,MAAMe,mBAAmB,GAAGT,KAAK,IAAIA,KAAK,CAACU,aAA3C;AAEP,eAAef,kBAAkB,CAACgB,OAAlC","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport axios from 'baseAxios'\r\nimport { genreTopVideoTransformation } from 'utils/transformations'\r\n\r\nconst fetchMovieGenres = async () => {\r\n    try {\r\n        const response = await axios.get(\r\n            `genre/movie/list?api_key=${process.env.REACT_APP_MOVIEDB_API_KEY}&language=en-US`\r\n        )\r\n\r\n        return response.data.genres\r\n    } catch (error) {\r\n        throw new Error(error)\r\n    }\r\n}\r\n\r\nexport const fetchMoviesByGenre = createAsyncThunk('moviesByGenreSlice/fetchMoviesByGenre',\r\n    async (_, { rejectWithValue }) => {\r\n        try {\r\n            const genres = await fetchMovieGenres()\r\n            return await genreTopVideoTransformation(genres, 'movie')\r\n        } catch (error) {\r\n            if (!error.response) {\r\n                throw error\r\n            }\r\n            return rejectWithValue(error.response.data)\r\n        }\r\n    }\r\n)\r\n\r\nconst initalState = {\r\n    genres: [],\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nconst moviesByGenreSlice = createSlice({\r\n    name: 'moviesByGenre',\r\n    initialState: initalState,\r\n    extraReducers: {\r\n        [fetchMoviesByGenre.pending]: (state, _) => {\r\n            state.status = 'loading'\r\n        },\r\n\r\n        [fetchMoviesByGenre.fulfilled]: (state, action) => {\r\n            action.payload.forEach(genre => {\r\n                state.genres.push({ ...genre })\r\n            })\r\n\r\n            state.status = 'success'\r\n        },\r\n\r\n        [fetchMoviesByGenre.rejected]: (state, action) => {\r\n            state.status = 'error'\r\n            if (action.payload) {\r\n                state.error = action.payload.status_message\r\n            } else {\r\n                state.error = action.error\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const selectMoviesByGenre = state => state.moviesByGenre\r\n\r\nexport default moviesByGenreSlice.reducer "]},"metadata":{},"sourceType":"module"}