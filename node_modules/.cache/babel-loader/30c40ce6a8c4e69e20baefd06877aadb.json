{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\src\\\\components\\\\Video\\\\VideoCarousel\\\\VideoCarousel.js\";\nimport React, { useState, useRef } from 'react';\nimport './VideoCarousel.css';\nimport VideoCard from '../VideoCard/VideoCard';\nimport { buildVideoMetadata } from 'utils/transformations';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronRight, faChevronLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { scrollTo } from 'utils/animations';\n\nconst VideoCarousel = props => {\n  const carouselVideo = props.carouselVideo,\n        carouselName = props.carouselName,\n        carouselHoverHandler = props.carouselHoverHandler,\n        videoInfo = props.videoInfo,\n        carouselClickHandler = props.carouselClickHandler;\n  const carouselRef = useRef();\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        disableScrolling = _useState2[0],\n        setDisableScrolling = _useState2[1];\n\n  const isNetflixOriginalCard = carouselName === \"Netflix Originals\" ? true : false;\n  const itemClass = [];\n  const itemsClass = []; // Setting different transition styles for the netflix original card \n\n  if (!isNetflixOriginalCard) {\n    itemClass.push(\"item\");\n    itemsClass.push(\"items\");\n  } else {\n    itemClass.push(\"netflix-item\");\n    itemsClass.push(\"netflix-items\");\n  }\n\n  const scrollOnAbsoluteButtonClick = scrollOffset => {\n    setDisableScrolling(true);\n    scrollTo(carouselRef.current, carouselRef.current.scrollLeft + scrollOffset, 1250, () => {\n      setDisableScrolling(false);\n    });\n  };\n  /**\r\n   * The mediaType property only exists in the trending API call. For the sake of using the same \r\n   * function 'videoDetailRequest' for multiple individual API calls, I use this mediaType \r\n   * variable to judge whether a video is a TV show or a movie. This fails for API calls, such as\r\n   * top rated or netflix originals. Thus, I have created a 'hacky' way of determining that by\r\n   * checking if two properties exist: the first_air_date (only for tv shows) or the release_date\r\n   * (only for movies).\r\n   */\n\n\n  const videoCards = carouselVideo.map(item => {\n    const _buildVideoMetadata = buildVideoMetadata(item, videoInfo),\n          mediaType = _buildVideoMetadata.mediaType,\n          extraInfo = _buildVideoMetadata.extraInfo;\n\n    return item.poster_path && /*#__PURE__*/React.createElement(\"div\", {\n      className: itemClass.join(' '),\n      key: item.id,\n      onClick: () => carouselClickHandler(item.id, mediaType),\n      onMouseEnter: () => carouselHoverHandler(item.id, mediaType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(VideoCard, Object.assign({\n      name: item.name || item.title,\n      vote_average: item.vote_average,\n      poster_path: item.poster_path,\n      netflixOriginalCard: isNetflixOriginalCard\n    }, extraInfo, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    })));\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"CarouselParent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"VideoCarousel\",\n    ref: carouselRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, carouselName), /*#__PURE__*/React.createElement(\"div\", {\n    className: itemsClass.join(\" \"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, videoCards)), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"Left NavItem\",\n    disabled: disableScrolling,\n    onClick: () => scrollOnAbsoluteButtonClick(-1250),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faChevronLeft,\n    size: \"2x\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"Right NavItem\",\n    disabled: disableScrolling,\n    onClick: () => scrollOnAbsoluteButtonClick(1250),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faChevronRight,\n    size: \"2x\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default React.memo(VideoCarousel);","map":{"version":3,"sources":["C:/Users/aftab/Desktop/netflixClone/Netflix-Clone/src/components/Video/VideoCarousel/VideoCarousel.js"],"names":["React","useState","useRef","VideoCard","buildVideoMetadata","FontAwesomeIcon","faChevronRight","faChevronLeft","scrollTo","VideoCarousel","props","carouselVideo","carouselName","carouselHoverHandler","videoInfo","carouselClickHandler","carouselRef","disableScrolling","setDisableScrolling","isNetflixOriginalCard","itemClass","itemsClass","push","scrollOnAbsoluteButtonClick","scrollOffset","current","scrollLeft","videoCards","map","item","mediaType","extraInfo","poster_path","join","id","name","title","vote_average","memo"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react'\r\nimport './VideoCarousel.css'\r\n\r\nimport VideoCard from '../VideoCard/VideoCard'\r\nimport { buildVideoMetadata } from 'utils/transformations'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faChevronRight, faChevronLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { scrollTo } from 'utils/animations'\r\n\r\n\r\nconst VideoCarousel = props => {\r\n    const {\r\n        carouselVideo, carouselName,\r\n        carouselHoverHandler, videoInfo,\r\n        carouselClickHandler\r\n    } = props\r\n\r\n    const carouselRef = useRef()\r\n    const [disableScrolling, setDisableScrolling] = useState(false)\r\n\r\n    const isNetflixOriginalCard = carouselName === \"Netflix Originals\" ? true : false\r\n    const itemClass = []\r\n    const itemsClass = []\r\n    // Setting different transition styles for the netflix original card \r\n    if (!isNetflixOriginalCard) {\r\n        itemClass.push(\"item\")\r\n        itemsClass.push(\"items\")\r\n    } else {\r\n        itemClass.push(\"netflix-item\")\r\n        itemsClass.push(\"netflix-items\")\r\n    }\r\n\r\n    const scrollOnAbsoluteButtonClick = scrollOffset => {\r\n        setDisableScrolling(true)\r\n        scrollTo(carouselRef.current, carouselRef.current.scrollLeft + scrollOffset, 1250, () => {\r\n            setDisableScrolling(false)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * The mediaType property only exists in the trending API call. For the sake of using the same \r\n     * function 'videoDetailRequest' for multiple individual API calls, I use this mediaType \r\n     * variable to judge whether a video is a TV show or a movie. This fails for API calls, such as\r\n     * top rated or netflix originals. Thus, I have created a 'hacky' way of determining that by\r\n     * checking if two properties exist: the first_air_date (only for tv shows) or the release_date\r\n     * (only for movies).\r\n     */\r\n    const videoCards = carouselVideo.map(item => {\r\n        const { mediaType, extraInfo } = buildVideoMetadata(item, videoInfo)\r\n        return (\r\n            item.poster_path && <div className={itemClass.join(' ')} key={item.id}\r\n                onClick={() => carouselClickHandler(item.id, mediaType)}\r\n                onMouseEnter={() => carouselHoverHandler(item.id, mediaType)}>\r\n                <VideoCard\r\n                    name={item.name || item.title}\r\n                    vote_average={item.vote_average}\r\n                    poster_path={item.poster_path}\r\n                    netflixOriginalCard={isNetflixOriginalCard}\r\n                    {...extraInfo}\r\n                />\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"CarouselParent\">\r\n            <div className=\"VideoCarousel\" ref={carouselRef}>\r\n                <h4>{carouselName}</h4>\r\n                <div className={itemsClass.join(\" \")}>\r\n                    {videoCards}\r\n                </div>\r\n            </div >\r\n\r\n            <button\r\n                className=\"Left NavItem\"\r\n                disabled={disableScrolling}\r\n                onClick={() => scrollOnAbsoluteButtonClick(-1250)}>\r\n                <FontAwesomeIcon icon={faChevronLeft} size=\"2x\" />\r\n            </button>\r\n            <button\r\n                className=\"Right NavItem\"\r\n                disabled={disableScrolling}\r\n                onClick={() => scrollOnAbsoluteButtonClick(1250)}>\r\n                <FontAwesomeIcon icon={faChevronRight} size=\"2x\" />\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(VideoCarousel)"]},"metadata":{},"sourceType":"module"}