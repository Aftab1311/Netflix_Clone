{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\src\\\\containers\\\\Browse\\\\routes\\\\Movies.js\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchMoviesByGenre, selectMoviesByGenre } from 'store/reducers/slices/moviesByGenreSlice';\nimport BrowseContent from '../BrowseContent/BrowseContent';\nimport LoadingScreen from 'components/StaticPages/LoadingScreen/LoadingScreen';\nimport ErrorPage from 'components/StaticPages/ErrorPage/ErrorPage';\n\nconst Movies = () => {\n  const _useSelector = useSelector(selectMoviesByGenre),\n        genres = _useSelector.genres,\n        status = _useSelector.status,\n        error = _useSelector.error;\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (status === 'idle') {\n      dispatch(fetchMoviesByGenre());\n    }\n  }, [dispatch, status]);\n  let browseContent;\n\n  if (status === 'success') {\n    browseContent = /*#__PURE__*/React.createElement(BrowseContent, {\n      videoSections: genres,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 25\n      }\n    });\n  } else if (status === 'idle' || status === 'loading') {\n    browseContent = /*#__PURE__*/React.createElement(LoadingScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 25\n      }\n    });\n  } else if (status === 'error') {\n    browseContent = /*#__PURE__*/React.createElement(ErrorPage, {\n      errors: error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 25\n      }\n    });\n  }\n\n  return browseContent;\n};\n\nexport default Movies;","map":{"version":3,"sources":["C:/Users/aftab/Desktop/netflixClone/Netflix-Clone/src/containers/Browse/routes/Movies.js"],"names":["React","useEffect","useSelector","useDispatch","fetchMoviesByGenre","selectMoviesByGenre","BrowseContent","LoadingScreen","ErrorPage","Movies","genres","status","error","dispatch","browseContent"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,kBAAT,EAA6BC,mBAA7B,QAAwD,0CAAxD;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,aAAP,MAA0B,oDAA1B;AACA,OAAOC,SAAP,MAAsB,4CAAtB;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA,uBACeP,WAAW,CAACG,mBAAD,CAD1B;AAAA,QACVK,MADU,gBACVA,MADU;AAAA,QACFC,MADE,gBACFA,MADE;AAAA,QACMC,KADN,gBACMA,KADN;;AAEjB,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,MAAM,KAAK,MAAf,EAAuB;AACnBE,MAAAA,QAAQ,CAACT,kBAAkB,EAAnB,CAAR;AACH;AACJ,GAJQ,EAIN,CAACS,QAAD,EAAWF,MAAX,CAJM,CAAT;AAMA,MAAIG,aAAJ;;AACA,MAAIH,MAAM,KAAK,SAAf,EAA0B;AACtBG,IAAAA,aAAa,gBAAG,oBAAC,aAAD;AAAe,MAAA,aAAa,EAAEJ,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAhB;AACH,GAFD,MAEO,IAAIC,MAAM,KAAK,MAAX,IAAqBA,MAAM,KAAK,SAApC,EAA+C;AAClDG,IAAAA,aAAa,gBAAG,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAhB;AACH,GAFM,MAEA,IAAGH,MAAM,KAAK,OAAd,EAAuB;AAC1BG,IAAAA,aAAa,gBAAG,oBAAC,SAAD;AAAW,MAAA,MAAM,EAAEF,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAhB;AACH;;AAED,SAAOE,aAAP;AACH,CApBD;;AAsBA,eAAeL,MAAf","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { fetchMoviesByGenre, selectMoviesByGenre } from 'store/reducers/slices/moviesByGenreSlice'\r\nimport BrowseContent from '../BrowseContent/BrowseContent'\r\nimport LoadingScreen from 'components/StaticPages/LoadingScreen/LoadingScreen'\r\nimport ErrorPage from 'components/StaticPages/ErrorPage/ErrorPage'\r\n\r\nconst Movies = () => {\r\n    const {genres, status, error} = useSelector(selectMoviesByGenre)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (status === 'idle') {\r\n            dispatch(fetchMoviesByGenre())\r\n        }\r\n    }, [dispatch, status])\r\n\r\n    let browseContent\r\n    if (status === 'success') {\r\n        browseContent = <BrowseContent videoSections={genres} />\r\n    } else if (status === 'idle' || status === 'loading') {\r\n        browseContent = <LoadingScreen />\r\n    } else if(status === 'error') {\r\n        browseContent = <ErrorPage errors={error}/>\r\n    }\r\n\r\n    return browseContent\r\n}\r\n\r\nexport default Movies"]},"metadata":{},"sourceType":"module"}