{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback } from 'react';\nimport { mediaTypeToVideoDetailTransformation } from 'utils/transformations';\nimport { isMobile } from 'react-device-detect'; // A custom hook which sets all VideoCard/Carousel click/hover behavior \n\nconst UseVideoInfoHandlers = () => {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        videoInfo = _useState2[0],\n        setVideoInfo = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        videoInfoError = _useState4[0],\n        setVideoInfoError = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        detailModal = _useState6[0],\n        setDetailModal = _useState6[1];\n\n  const cardClickHandler = useCallback((videoId, mediaType) => {\n    if (!isMobile) {\n      setDetailModal(true);\n    } else {\n      mediaTypeToVideoDetailTransformation(videoId, mediaType).then(data => {\n        setVideoInfo(data);\n        setDetailModal(true);\n      }).catch(error => {\n        setVideoInfoError(error);\n      });\n    }\n  }, []);\n  const cardHoverHandler = useCallback((videoId, mediaType) => {\n    mediaTypeToVideoDetailTransformation(videoId, mediaType).then(data => {\n      setVideoInfo(data);\n    }).catch(error => {\n      setVideoInfoError(error);\n    });\n  }, []);\n  const closeModalHandler = useCallback(() => {\n    setDetailModal(false);\n  }, []);\n  return [videoInfo, videoInfoError, detailModal, cardClickHandler, cardHoverHandler, closeModalHandler];\n};\n\nexport default UseVideoInfoHandlers;","map":{"version":3,"sources":["C:/Users/aftab/Desktop/netflixClone/Netflix-Clone/src/hooks/useVideoInfoHandlers.js"],"names":["useState","useCallback","mediaTypeToVideoDetailTransformation","isMobile","UseVideoInfoHandlers","videoInfo","setVideoInfo","videoInfoError","setVideoInfoError","detailModal","setDetailModal","cardClickHandler","videoId","mediaType","then","data","catch","error","cardHoverHandler","closeModalHandler"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,SAASC,oCAAT,QAAqD,uBAArD;AACA,SAASC,QAAT,QAAyB,qBAAzB,C,CAEA;;AACA,MAAMC,oBAAoB,GAAG,MAAM;AAAA,oBACGJ,QAAQ,EADX;AAAA;AAAA,QACxBK,SADwB;AAAA,QACbC,YADa;;AAAA,qBAEaN,QAAQ,CAAC,IAAD,CAFrB;AAAA;AAAA,QAExBO,cAFwB;AAAA,QAERC,iBAFQ;;AAAA,qBAGOR,QAAQ,CAAC,KAAD,CAHf;AAAA;AAAA,QAGxBS,WAHwB;AAAA,QAGXC,cAHW;;AAK/B,QAAMC,gBAAgB,GAAGV,WAAW,CAAC,CAACW,OAAD,EAAUC,SAAV,KAAwB;AACzD,QAAI,CAACV,QAAL,EAAe;AACXO,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAFD,MAEO;AACHR,MAAAA,oCAAoC,CAACU,OAAD,EAAUC,SAAV,CAApC,CACKC,IADL,CACUC,IAAI,IAAI;AACVT,QAAAA,YAAY,CAACS,IAAD,CAAZ;AACAL,QAAAA,cAAc,CAAC,IAAD,CAAd;AACH,OAJL,EAKKM,KALL,CAKWC,KAAK,IAAI;AACZT,QAAAA,iBAAiB,CAACS,KAAD,CAAjB;AACH,OAPL;AAQH;AACJ,GAbmC,EAajC,EAbiC,CAApC;AAeA,QAAMC,gBAAgB,GAAGjB,WAAW,CAAC,CAACW,OAAD,EAAUC,SAAV,KAAwB;AACzDX,IAAAA,oCAAoC,CAACU,OAAD,EAAUC,SAAV,CAApC,CACKC,IADL,CACUC,IAAI,IAAI;AACVT,MAAAA,YAAY,CAACS,IAAD,CAAZ;AACH,KAHL,EAIKC,KAJL,CAIWC,KAAK,IAAI;AACZT,MAAAA,iBAAiB,CAACS,KAAD,CAAjB;AACH,KANL;AAOH,GARmC,EAQjC,EARiC,CAApC;AAUA,QAAME,iBAAiB,GAAGlB,WAAW,CAAC,MAAM;AACxCS,IAAAA,cAAc,CAAC,KAAD,CAAd;AACH,GAFoC,EAElC,EAFkC,CAArC;AAIA,SAAO,CAACL,SAAD,EAAYE,cAAZ,EAA4BE,WAA5B,EAAyCE,gBAAzC,EAA2DO,gBAA3D,EAA6EC,iBAA7E,CAAP;AACH,CAnCD;;AAqCA,eAAef,oBAAf","sourcesContent":["import { useState, useCallback } from 'react'\r\n\r\nimport { mediaTypeToVideoDetailTransformation } from 'utils/transformations'\r\nimport { isMobile } from 'react-device-detect'\r\n\r\n// A custom hook which sets all VideoCard/Carousel click/hover behavior \r\nconst UseVideoInfoHandlers = () => {\r\n    const [videoInfo, setVideoInfo] = useState()\r\n    const [videoInfoError, setVideoInfoError] = useState(null)\r\n    const [detailModal, setDetailModal] = useState(false)\r\n\r\n    const cardClickHandler = useCallback((videoId, mediaType) => {\r\n        if (!isMobile) {\r\n            setDetailModal(true)\r\n        } else {\r\n            mediaTypeToVideoDetailTransformation(videoId, mediaType)\r\n                .then(data => {\r\n                    setVideoInfo(data)\r\n                    setDetailModal(true)\r\n                })\r\n                .catch(error => {\r\n                    setVideoInfoError(error)\r\n                })\r\n        }\r\n    }, [])\r\n\r\n    const cardHoverHandler = useCallback((videoId, mediaType) => {\r\n        mediaTypeToVideoDetailTransformation(videoId, mediaType)\r\n            .then(data => {\r\n                setVideoInfo(data)\r\n            })\r\n            .catch(error => {\r\n                setVideoInfoError(error)\r\n            })\r\n    }, [])\r\n\r\n    const closeModalHandler = useCallback(() => {\r\n        setDetailModal(false)\r\n    }, [])\r\n\r\n    return [videoInfo, videoInfoError, detailModal, cardClickHandler, cardHoverHandler, closeModalHandler]\r\n}\r\n\r\nexport default UseVideoInfoHandlers"]},"metadata":{},"sourceType":"module"}