{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\src\\\\utils\\\\transformations.js\";\nimport React from 'react';\nimport axios from 'baseAxios';\nimport { isMobile } from 'react-device-detect';\nimport VideoModal from 'components/Modals/VideoModal/VideoModal';\n/**\r\n * \r\n * @param {*} genres: the genres\r\n * @param {*} apiCallType: whether the subsequent API calls will be made for tv or movies \r\n * \r\n * Takes a genre object and does creates a big chain of API calls to get each genre's top trending videos\r\n * \r\n * Fetches all genres and creates a trending movies API call for each. I push the response with \r\n * a title and content to make it easier to label the video carousels later. This Promise.all \r\n * function returns a large array, so I have to parse through the action.payload later \r\n * in the slice reducer.  \r\n */\n\nexport const genreTopVideoTransformation = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(genres, apiCallType) {\n    var url, genreRequestArray;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (apiCallType === 'tv') {\n            url = \"discover/tv?api_key=\".concat(process.env.REACT_APP_MOVIEDB_API_KEY, \"&language=en-US&sort_by=popularity.desc&page=1&include_null_first_air_dates=false&with_genres=\");\n          } else if (apiCallType === 'movie') {\n            url = \"discover/movie?api_key=\".concat(process.env.REACT_APP_MOVIEDB_API_KEY, \"&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=\");\n          }\n\n          genreRequestArray = [];\n          genres.forEach(genre => {\n            let newUrlParser = url;\n            newUrlParser += genre.id.toString();\n            genreRequestArray.push(axios.get(newUrlParser).then(response => ({\n              title: genre.name,\n              videos: response.data.results\n            })));\n          });\n          _context.prev = 3;\n          _context.next = 6;\n          return Promise.all(genreRequestArray);\n\n        case 6:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](3);\n          throw new Error(_context.t0);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[3, 9]]);\n  }));\n\n  return function genreTopVideoTransformation(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport const mediaTypeToVideoDetailTransformation = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(videoId, mediaType) {\n    var requestURL, response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (mediaType === 'movie') {\n            requestURL = \"movie/\".concat(videoId, \"?api_key=\").concat(process.env.REACT_APP_MOVIEDB_API_KEY, \"&language=en-US\");\n          } else if (mediaType === 'tv') {\n            requestURL = \"tv/\".concat(videoId, \"?api_key=\").concat(process.env.REACT_APP_MOVIEDB_API_KEY, \"&language=en-US\");\n          }\n\n          _context2.prev = 1;\n          _context2.next = 4;\n          return axios.get(requestURL);\n\n        case 4:\n          response = _context2.sent;\n          return _context2.abrupt(\"return\", response.data);\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](1);\n          throw new Error(_context2.t0);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[1, 8]]);\n  }));\n\n  return function mediaTypeToVideoDetailTransformation(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport const buildVideoMetadata = (videoItem, selectedVideoInfo) => {\n  let mediaType;\n\n  if (videoItem.media_type) {\n    mediaType = videoItem.media_type;\n  } else {\n    if (videoItem.first_air_date) {\n      mediaType = 'tv';\n    } else if (videoItem.release_date) {\n      mediaType = 'movie';\n    }\n  }\n\n  let extraInfo = {};\n\n  if (!isMobile) {\n    if (selectedVideoInfo && selectedVideoInfo.id === videoItem.id) {\n      extraInfo['genres'] = selectedVideoInfo.genres;\n\n      if (selectedVideoInfo.runtime) {\n        extraInfo['runtime'] = selectedVideoInfo.runtime;\n      } else if (selectedVideoInfo.seasons) {\n        extraInfo['seasons'] = selectedVideoInfo.seasons;\n      }\n    }\n  }\n\n  return {\n    mediaType,\n    extraInfo\n  };\n};\nexport const buildVideoModal = (videoDetailModal, videoInfo, handlers) => {\n  let detailModalComponent;\n\n  if (videoDetailModal && videoInfo) {\n    detailModalComponent = /*#__PURE__*/React.createElement(VideoModal, Object.assign({\n      videoDetailModal: videoDetailModal,\n      videoInfo: videoInfo\n    }, handlers, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  return detailModalComponent;\n};","map":{"version":3,"sources":["C:/Users/aftab/Desktop/netflixClone/Netflix-Clone/src/utils/transformations.js"],"names":["React","axios","isMobile","VideoModal","genreTopVideoTransformation","genres","apiCallType","url","process","env","REACT_APP_MOVIEDB_API_KEY","genreRequestArray","forEach","genre","newUrlParser","id","toString","push","get","then","response","title","name","videos","data","results","Promise","all","Error","mediaTypeToVideoDetailTransformation","videoId","mediaType","requestURL","buildVideoMetadata","videoItem","selectedVideoInfo","media_type","first_air_date","release_date","extraInfo","runtime","seasons","buildVideoModal","videoDetailModal","videoInfo","handlers","detailModalComponent"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nimport axios from 'baseAxios'\r\nimport { isMobile } from 'react-device-detect'\r\nimport VideoModal from 'components/Modals/VideoModal/VideoModal'\r\n\r\n/**\r\n * \r\n * @param {*} genres: the genres\r\n * @param {*} apiCallType: whether the subsequent API calls will be made for tv or movies \r\n * \r\n * Takes a genre object and does creates a big chain of API calls to get each genre's top trending videos\r\n * \r\n * Fetches all genres and creates a trending movies API call for each. I push the response with \r\n * a title and content to make it easier to label the video carousels later. This Promise.all \r\n * function returns a large array, so I have to parse through the action.payload later \r\n * in the slice reducer.  \r\n */\r\n\r\nexport const genreTopVideoTransformation = async (genres, apiCallType) => {\r\n    let url\r\n    if (apiCallType === 'tv') {\r\n        url = `discover/tv?api_key=${process.env.REACT_APP_MOVIEDB_API_KEY}&language=en-US&sort_by=popularity.desc&page=1&include_null_first_air_dates=false&with_genres=`\r\n    } else if (apiCallType === 'movie') {\r\n        url = `discover/movie?api_key=${process.env.REACT_APP_MOVIEDB_API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=`\r\n    }\r\n\r\n    const genreRequestArray = []\r\n    genres.forEach(genre => {\r\n        let newUrlParser = url\r\n        newUrlParser += genre.id.toString()\r\n        genreRequestArray.push(axios.get(newUrlParser).then(response =>\r\n            ({ title: genre.name, videos: response.data.results })))\r\n    })\r\n\r\n    try {\r\n        return await Promise.all(genreRequestArray)\r\n    } catch (error) {\r\n        throw new Error(error)\r\n    }\r\n}\r\n\r\nexport const mediaTypeToVideoDetailTransformation = async (videoId, mediaType) => {\r\n    let requestURL;\r\n    if (mediaType === 'movie') {\r\n        requestURL = `movie/${videoId}?api_key=${process.env.REACT_APP_MOVIEDB_API_KEY}&language=en-US`\r\n    } else if (mediaType === 'tv') {\r\n        requestURL = `tv/${videoId}?api_key=${process.env.REACT_APP_MOVIEDB_API_KEY}&language=en-US`\r\n    }\r\n\r\n    try {\r\n        const response = await axios.get(requestURL)\r\n        return response.data\r\n    } catch (error) {\r\n        throw new Error(error)\r\n    }\r\n}\r\n\r\nexport const buildVideoMetadata = (videoItem, selectedVideoInfo) => {\r\n    let mediaType\r\n    if (videoItem.media_type) {\r\n        mediaType = videoItem.media_type\r\n    } else {\r\n        if (videoItem.first_air_date) {\r\n            mediaType = 'tv'\r\n        } else if (videoItem.release_date) {\r\n            mediaType = 'movie'\r\n        }\r\n    }\r\n\r\n    let extraInfo = {}\r\n    if (!isMobile) {\r\n        if (selectedVideoInfo && selectedVideoInfo.id === videoItem.id) {\r\n            extraInfo['genres'] = selectedVideoInfo.genres\r\n            if (selectedVideoInfo.runtime) {\r\n                extraInfo['runtime'] = selectedVideoInfo.runtime\r\n            } else if (selectedVideoInfo.seasons) {\r\n                extraInfo['seasons'] = selectedVideoInfo.seasons\r\n            }\r\n        }\r\n    }\r\n\r\n    return { mediaType, extraInfo }\r\n}\r\n\r\nexport const buildVideoModal = (videoDetailModal, videoInfo, handlers) => {\r\n    let detailModalComponent\r\n    if (videoDetailModal && videoInfo) {\r\n        detailModalComponent = (\r\n            <VideoModal\r\n                videoDetailModal={videoDetailModal}\r\n                videoInfo={videoInfo}\r\n                {...handlers}\r\n            />\r\n        )\r\n    }\r\n\r\n    return detailModalComponent\r\n}"]},"metadata":{},"sourceType":"module"}