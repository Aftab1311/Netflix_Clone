{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\src\\\\containers\\\\Login\\\\Login.js\";\nimport React, { useState, useContext } from \"react\";\nimport \"./Login.css\";\nimport { NetflixLogo, LoginBackground } from \"assets/images/\";\nimport { TextField } from \"@material-ui/core\";\nimport Button from \"components/UI/Button/Button\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { useHistory } from \"react-router-dom\";\nimport { AuthenticationContext } from 'context/Authentication';\nimport { validEmailAndPhoneNumber } from 'utils/validation';\n/**\r\n * The login component, which validates the email and password\r\n * fields and uses a controlled form. Uses material UI for the\r\n * textfields.\r\n */\n\nconst Login = props => {\n  const _useState = useState({\n    email: {\n      value: '',\n      touched: false,\n      valid: false\n    },\n    password: {\n      value: '',\n      touched: false,\n      valid: false\n    },\n    onSubmitInvalid: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        form = _useState2[0],\n        setForm = _useState2[1];\n\n  const history = useHistory();\n  const authContext = useContext(AuthenticationContext);\n\n  const inputChangeHandler = event => {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n\n    if (name === \"email\") {\n      setForm(prevForm => _objectSpread(_objectSpread({}, prevForm), {}, {\n        email: _objectSpread(_objectSpread({}, prevForm.email), {}, {\n          value: value,\n          touched: true,\n          valid: value.length > 0 && validEmailAndPhoneNumber(value)\n        })\n      }));\n    } else if (name === \"password\") {\n      setForm(prevForm => _objectSpread(_objectSpread({}, prevForm), {}, {\n        password: _objectSpread(_objectSpread({}, prevForm.password), {}, {\n          value: value,\n          touched: true,\n          valid: value.length >= 4 && value.length <= 60\n        })\n      }));\n    }\n  }; // For setting error spans once any of the fields are touched.\n\n\n  const fieldBlurHandler = event => {\n    if (event.target.name === 'email') {\n      if (form.email.value === '') {\n        setForm(prevForm => _objectSpread(_objectSpread({}, prevForm), {}, {\n          email: _objectSpread(_objectSpread({}, prevForm.email), {}, {\n            touched: true\n          })\n        }));\n      }\n    }\n\n    if (event.target.name === 'password') {\n      if (form.password.value === '') {\n        setForm(prevForm => _objectSpread(_objectSpread({}, prevForm), {}, {\n          password: _objectSpread(_objectSpread({}, prevForm.password), {}, {\n            touched: true\n          })\n        }));\n      }\n    }\n  };\n\n  let emailSpan = null,\n      passwordSpan = null;\n\n  if (!form.email.valid && form.email.touched || form.onSubmitInvalid && !form.email.valid) {\n    emailSpan = /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, \"Please enter a valid email or phone number.\");\n  }\n\n  if (!form.password.valid && form.password.touched || form.onSubmitInvalid && !form.password.valid) {\n    passwordSpan = /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 20\n      }\n    }, \"Your password must contain between 4 and 60 characters.\");\n  }\n\n  const formSubmitHandler = event => {\n    event.preventDefault();\n\n    if (!form.email.valid || !form.password.valid) {\n      setForm(prevForm => _objectSpread(_objectSpread({}, prevForm), {}, {\n        onSubmitInvalid: true\n      }));\n    } else {\n      authContext.login();\n      history.push(\"/browse\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Login\",\n    style: {\n      backgroundImage: \"url(\".concat(LoginBackground, \")\")\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: NetflixLogo,\n    alt: \"Logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"LoginCard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, \"Sign In\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: formSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    name: \"email\",\n    className: \"textField\",\n    label: \"Email or phone number\",\n    variant: \"filled\",\n    type: \"text\",\n    style: {\n      backgroundColor: \"#333\"\n    },\n    color: \"secondary\",\n    value: form.email.value,\n    onChange: inputChangeHandler,\n    onBlur: fieldBlurHandler,\n    autoComplete: \"off\",\n    InputLabelProps: {\n      style: {\n        color: \"#8c8c8c\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }), emailSpan, /*#__PURE__*/React.createElement(TextField, {\n    name: \"password\",\n    className: \"textField\",\n    label: \"Password\",\n    variant: \"filled\",\n    type: \"password\",\n    style: {\n      backgroundColor: \"#333\"\n    },\n    color: \"secondary\",\n    value: form.password.value,\n    onChange: inputChangeHandler,\n    onBlur: fieldBlurHandler,\n    autoComplete: \"off\",\n    InputLabelProps: {\n      style: {\n        color: \"#8c8c8c\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }), passwordSpan, /*#__PURE__*/React.createElement(Button, {\n    height: \"45px\",\n    width: \"100%\",\n    backgroundColor: \"#e50914\",\n    textColor: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, \"Sign In\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"HorizontalDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    style: {\n      marginLeft: \"-12px\"\n    },\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      style: {\n        color: \"rgb(229, 9, 20)\"\n      },\n      name: \"checkedB\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    }),\n    label: \"Remember Me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, \"Need help?\"))));\n};\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/aftab/Desktop/netflixClone/Netflix-Clone/src/containers/Login/Login.js"],"names":["React","useState","useContext","NetflixLogo","LoginBackground","TextField","Button","FormControlLabel","Checkbox","useHistory","AuthenticationContext","validEmailAndPhoneNumber","Login","props","email","value","touched","valid","password","onSubmitInvalid","form","setForm","history","authContext","inputChangeHandler","event","target","name","prevForm","length","fieldBlurHandler","emailSpan","passwordSpan","formSubmitHandler","preventDefault","login","push","backgroundImage","backgroundColor","style","color","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport \"./Login.css\";\r\n\r\nimport { NetflixLogo, LoginBackground } from \"assets/images/\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Button from \"components/UI/Button/Button\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { AuthenticationContext } from 'context/Authentication'\r\nimport { validEmailAndPhoneNumber } from 'utils/validation'\r\n\r\n\r\n/**\r\n * The login component, which validates the email and password\r\n * fields and uses a controlled form. Uses material UI for the\r\n * textfields.\r\n */\r\nconst Login = props => {\r\n  const [form, setForm] = useState({\r\n    email: {\r\n      value: '',\r\n      touched: false,\r\n      valid: false\r\n    },\r\n\r\n    password: {\r\n      value: '',\r\n      touched: false,\r\n      valid: false\r\n    },\r\n\r\n    onSubmitInvalid: false\r\n  })\r\n\r\n  const history = useHistory()\r\n  const authContext = useContext(AuthenticationContext)\r\n\r\n  const inputChangeHandler = event => {\r\n    const { name, value } = event.target;\r\n    if (name === \"email\") {\r\n      setForm(prevForm => ({\r\n        ...prevForm,\r\n        email: {\r\n          ...prevForm.email,\r\n          value: value, touched: true, valid: value.length > 0 && validEmailAndPhoneNumber(value)\r\n        }\r\n      }))\r\n\r\n    } else if (name === \"password\") {\r\n      setForm(prevForm => ({\r\n        ...prevForm,\r\n        password: {\r\n          ...prevForm.password, value: value, touched: true,\r\n          valid: value.length >= 4 && value.length <= 60\r\n        }\r\n      }))\r\n    }\r\n  };\r\n\r\n  // For setting error spans once any of the fields are touched.\r\n  const fieldBlurHandler = event => {\r\n    if (event.target.name === 'email') {\r\n      if (form.email.value === '') {\r\n        setForm(prevForm => ({\r\n          ...prevForm,\r\n          email: { ...prevForm.email, touched: true }\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (event.target.name === 'password') {\r\n      if (form.password.value === '') {\r\n        setForm(prevForm => ({\r\n          ...prevForm,\r\n          password: { ...prevForm.password, touched: true }\r\n        }))\r\n      }\r\n    }\r\n  };\r\n\r\n  let [emailSpan, passwordSpan] = [null, null];\r\n\r\n  if ((!form.email.valid && form.email.touched) || (form.onSubmitInvalid && !form.email.valid)) {\r\n    emailSpan = <span>Please enter a valid email or phone number.</span>\r\n  }\r\n\r\n  if ((!form.password.valid && form.password.touched) || (form.onSubmitInvalid && !form.password.valid)) {\r\n    passwordSpan = <span>Your password must contain between 4 and 60 characters.</span>\r\n  }\r\n\r\n  const formSubmitHandler = (event) => {\r\n    event.preventDefault()\r\n    if (!form.email.valid || !form.password.valid) {\r\n      setForm(prevForm => ({ ...prevForm, onSubmitInvalid: true }))\r\n    } else {\r\n      authContext.login()\r\n      history.push(\"/browse\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"Login\"\r\n      style={{ backgroundImage: `url(${LoginBackground})` }}\r\n    >\r\n      <img src={NetflixLogo} alt=\"Logo\" />\r\n      <div className=\"LoginCard\">\r\n        <h1>Sign In</h1>\r\n        <form onSubmit={formSubmitHandler}>\r\n          <TextField\r\n            name=\"email\"\r\n            className=\"textField\"\r\n            label=\"Email or phone number\"\r\n            variant=\"filled\"\r\n            type=\"text\"\r\n            style={{ backgroundColor: \"#333\" }}\r\n            color=\"secondary\"\r\n            value={form.email.value}\r\n            onChange={inputChangeHandler}\r\n            onBlur={fieldBlurHandler}\r\n            autoComplete=\"off\"\r\n            InputLabelProps={{\r\n              style: { color: \"#8c8c8c\" }\r\n            }}\r\n          />\r\n\r\n          {emailSpan}\r\n\r\n          <TextField\r\n            name=\"password\"\r\n            className=\"textField\"\r\n            label=\"Password\"\r\n            variant=\"filled\"\r\n            type=\"password\"\r\n            style={{ backgroundColor: \"#333\" }}\r\n            color=\"secondary\"\r\n            value={form.password.value}\r\n            onChange={inputChangeHandler}\r\n            onBlur={fieldBlurHandler}\r\n            autoComplete=\"off\"\r\n            InputLabelProps={{\r\n              style: { color: \"#8c8c8c\" }\r\n            }}\r\n          />\r\n\r\n          {passwordSpan}\r\n\r\n          <Button\r\n            height=\"45px\" width=\"100%\"\r\n            backgroundColor=\"#e50914\"\r\n            textColor=\"#fff\">\r\n            Sign In\r\n          </Button>\r\n\r\n        </form>\r\n\r\n        <div className=\"HorizontalDiv\">\r\n          <FormControlLabel\r\n            style={{ marginLeft: \"-12px\" }}\r\n            control={\r\n              <Checkbox style={{ color: \"rgb(229, 9, 20)\" }} name=\"checkedB\" />\r\n            }\r\n            label=\"Remember Me\"\r\n          />\r\n          <span>Need help?</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}