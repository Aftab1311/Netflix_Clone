{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\src\\\\containers\\\\Browse\\\\SearchContent\\\\SearchContent.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './SearchContent.css';\nimport axios from 'baseAxios';\nimport VideoCard from 'components/Video/VideoCard/VideoCard';\nimport { debounce } from 'lodash';\nimport { buildVideoMetadata, buildVideoModal } from 'utils/transformations';\nimport { sortVideosByPopularity } from 'utils/sorting';\nimport useVideoInfoHandlers from 'hooks/useVideoInfoHandlers';\nimport ErrorPage from 'components/StaticPages/ErrorPage/ErrorPage';\n\nconst SearchContent = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        searchedVideoList = _useState2[0],\n        setSearchedVideoList = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        searchedError = _useState4[0],\n        setSearchedError = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        loading = _useState6[0],\n        setLoading = _useState6[1];\n\n  const searchParam = props.searchParam;\n\n  const _useVideoInfoHandlers = useVideoInfoHandlers(),\n        _useVideoInfoHandlers2 = _slicedToArray(_useVideoInfoHandlers, 6),\n        videoInfo = _useVideoInfoHandlers2[0],\n        videoInfoError = _useVideoInfoHandlers2[1],\n        detailModal = _useVideoInfoHandlers2[2],\n        cardClickHandler = _useVideoInfoHandlers2[3],\n        cardHoverHandler = _useVideoInfoHandlers2[4],\n        closeModalHandler = _useVideoInfoHandlers2[5];\n\n  const getSearchMovies = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(searchItem) {\n      var movieUrl, tvUrl, responses;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            movieUrl = \"search/movie?api_key=\".concat(process.env.REACT_APP_MOVIEDB_API_KEY, \"&language=en-US&query=\").concat(searchItem, \"&page=1&include_adult=false\");\n            tvUrl = \"search/tv?api_key=\".concat(process.env.REACT_APP_MOVIEDB_API_KEY, \"&language=en-US&page=1&query=\").concat(searchItem, \"&include_adult=false\");\n            _context.prev = 2;\n            _context.next = 5;\n            return Promise.all([axios.get(movieUrl).then(response => response.data.results), axios.get(tvUrl).then(response => response.data.results)]);\n\n          case 5:\n            responses = _context.sent;\n            setSearchedVideoList([...responses[0], ...responses[1]]);\n            setLoading(false);\n            _context.next = 14;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](2);\n            setSearchedError(_context.t0);\n            setLoading(false);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 10]]);\n    }));\n\n    return function getSearchMovies(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const delayedAPICall = useCallback(debounce(getSearchMovies, 1000), []);\n  useEffect(() => {\n    delayedAPICall(searchParam);\n    return () => {\n      delayedAPICall.cancel();\n    };\n  }, [delayedAPICall, searchParam]);\n  const detailModalComponent = buildVideoModal(detailModal, videoInfo, {\n    closeModalHandler\n  }); // we check if the video has a poster or a mediaType because these properties are missing in \n  // some tiles, and, generally, a missing mediaType means there is no video overview or \n  // information. It's an easy fix to skip these little known movies, as the API itself \n  // doesn't provide information. \n\n  let movieCards;\n\n  if (!loading) {\n    searchedVideoList.sort(sortVideosByPopularity);\n    movieCards = searchedVideoList.map(video => {\n      const _buildVideoMetadata = buildVideoMetadata(video, videoInfo),\n            mediaType = _buildVideoMetadata.mediaType,\n            extraInfo = _buildVideoMetadata.extraInfo;\n\n      return video.poster_path && mediaType && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"GridItem\",\n        key: video.id,\n        onClick: () => cardClickHandler(video.id, mediaType),\n        onMouseEnter: () => cardHoverHandler(video.id, mediaType),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(VideoCard, Object.assign({\n        name: video.name || video.title,\n        vote_average: video.vote_average,\n        poster_path: video.poster_path,\n        netflixOriginalCard: false\n      }, extraInfo, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }\n      })));\n    });\n  }\n\n  return !videoInfoError && !searchedError ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"SearchContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"SearchGrid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, movieCards), detailModalComponent) : /*#__PURE__*/React.createElement(ErrorPage, {\n    errors: videoInfoError || searchedError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  });\n};\n\nexport default SearchContent;","map":{"version":3,"sources":["C:/Users/aftab/Desktop/netflixClone/Netflix-Clone/src/containers/Browse/SearchContent/SearchContent.js"],"names":["React","useState","useEffect","useCallback","axios","VideoCard","debounce","buildVideoMetadata","buildVideoModal","sortVideosByPopularity","useVideoInfoHandlers","ErrorPage","SearchContent","props","searchedVideoList","setSearchedVideoList","searchedError","setSearchedError","loading","setLoading","searchParam","videoInfo","videoInfoError","detailModal","cardClickHandler","cardHoverHandler","closeModalHandler","getSearchMovies","searchItem","movieUrl","process","env","REACT_APP_MOVIEDB_API_KEY","tvUrl","Promise","all","get","then","response","data","results","responses","delayedAPICall","cancel","detailModalComponent","movieCards","sort","map","video","mediaType","extraInfo","poster_path","id","name","title","vote_average"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\r\nimport './SearchContent.css'\r\n\r\nimport axios from 'baseAxios'\r\nimport VideoCard from 'components/Video/VideoCard/VideoCard'\r\nimport { debounce } from 'lodash'\r\nimport { buildVideoMetadata, buildVideoModal } from 'utils/transformations'\r\nimport { sortVideosByPopularity } from 'utils/sorting'\r\nimport useVideoInfoHandlers from 'hooks/useVideoInfoHandlers'\r\nimport ErrorPage from 'components/StaticPages/ErrorPage/ErrorPage'\r\n\r\nconst SearchContent = props => {\r\n    const [searchedVideoList, setSearchedVideoList] = useState([])\r\n    const [searchedError, setSearchedError] = useState(null)\r\n    const [loading, setLoading] = useState(true)\r\n    const { searchParam } = props\r\n    const [\r\n        videoInfo, videoInfoError, detailModal, cardClickHandler,\r\n        cardHoverHandler, closeModalHandler\r\n    ] = useVideoInfoHandlers()\r\n\r\n    const getSearchMovies = async (searchItem) => {\r\n        const movieUrl = `search/movie?api_key=${process.env.REACT_APP_MOVIEDB_API_KEY}&language=en-US&query=${searchItem}&page=1&include_adult=false`\r\n        const tvUrl = `search/tv?api_key=${process.env.REACT_APP_MOVIEDB_API_KEY}&language=en-US&page=1&query=${searchItem}&include_adult=false`\r\n\r\n        try {\r\n            const responses = await Promise.all(\r\n                [\r\n                    axios.get(movieUrl).then(response => response.data.results),\r\n                    axios.get(tvUrl).then(response => response.data.results)\r\n                ]\r\n            )\r\n\r\n            setSearchedVideoList([...responses[0], ...responses[1]])\r\n            setLoading(false)\r\n        } catch (error) {\r\n            setSearchedError(error)\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    const delayedAPICall = useCallback(debounce(getSearchMovies, 1000), [])\r\n\r\n    useEffect(() => {\r\n        delayedAPICall(searchParam)\r\n        return () => {\r\n            delayedAPICall.cancel()\r\n        }\r\n    }, [delayedAPICall, searchParam])\r\n\r\n    const detailModalComponent = buildVideoModal(detailModal, videoInfo, { closeModalHandler })\r\n\r\n    // we check if the video has a poster or a mediaType because these properties are missing in \r\n    // some tiles, and, generally, a missing mediaType means there is no video overview or \r\n    // information. It's an easy fix to skip these little known movies, as the API itself \r\n    // doesn't provide information. \r\n    let movieCards\r\n    if (!loading) {\r\n        searchedVideoList.sort(sortVideosByPopularity)\r\n        movieCards = searchedVideoList.map(video => {\r\n            const { mediaType, extraInfo } = buildVideoMetadata(video, videoInfo)\r\n            return video.poster_path && mediaType && (\r\n                <div className=\"GridItem\"\r\n                    key={video.id}\r\n                    onClick={\r\n                        () => cardClickHandler(video.id, mediaType)}\r\n                    onMouseEnter={\r\n                        () => cardHoverHandler(video.id, mediaType)} >\r\n                    <VideoCard name={video.name || video.title}\r\n                        vote_average={video.vote_average}\r\n                        poster_path={video.poster_path}\r\n                        netflixOriginalCard={false} {...extraInfo} />\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        (!videoInfoError && !searchedError) ? (\r\n            <div className=\"SearchContent\">\r\n                <div className=\"SearchGrid\">\r\n                    {movieCards}\r\n                </div>\r\n                {detailModalComponent}\r\n            </div>) :\r\n            <ErrorPage errors={videoInfoError || searchedError} />\r\n    )\r\n}\r\n\r\nexport default SearchContent"]},"metadata":{},"sourceType":"module"}