{"ast":null,"code":"export const scrollTo = (element, to, duration, scrollToDone = null) => {\n  Math.easeInOutQuad = (t, b, c, d) => {\n    t /= d / 2;\n    if (t < 1) return c / 2 * t * t + b;\n    t--;\n    return -c / 2 * (t * (t - 2) - 1) + b;\n  };\n\n  let start = element.scrollLeft,\n      change = to - start,\n      currentTime = 0,\n      increment = 20;\n\n  const animateScroll = () => {\n    currentTime += increment;\n    const val = Math.easeInOutQuad(currentTime, start, change, duration);\n    element.scrollLeft = val;\n\n    if (currentTime < duration) {\n      setTimeout(animateScroll, increment);\n    } else {\n      if (scrollToDone) scrollToDone();\n    }\n  };\n\n  animateScroll();\n};","map":{"version":3,"sources":["C:/Users/aftab/Desktop/netflixClone/Netflix-Clone/src/utils/animations.js"],"names":["scrollTo","element","to","duration","scrollToDone","Math","easeInOutQuad","t","b","c","d","start","scrollLeft","change","currentTime","increment","animateScroll","val","setTimeout"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,CAACC,OAAD,EAAUC,EAAV,EAAcC,QAAd,EAAwBC,YAAY,GAAG,IAAvC,KAAgD;AACpEC,EAAAA,IAAI,CAACC,aAAL,GAAqB,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,KAAgB;AACjCH,IAAAA,CAAC,IAAIG,CAAC,GAAG,CAAT;AACA,QAAIH,CAAC,GAAG,CAAR,EAAW,OAAOE,CAAC,GAAG,CAAJ,GAAQF,CAAR,GAAYA,CAAZ,GAAgBC,CAAvB;AACXD,IAAAA,CAAC;AACD,WAAO,CAACE,CAAD,GAAK,CAAL,IAAUF,CAAC,IAAIA,CAAC,GAAG,CAAR,CAAD,GAAc,CAAxB,IAA6BC,CAApC;AACH,GALD;;AAOA,MAAIG,KAAK,GAAGV,OAAO,CAACW,UAApB;AAAA,MACIC,MAAM,GAAGX,EAAE,GAAGS,KADlB;AAAA,MAEIG,WAAW,GAAG,CAFlB;AAAA,MAGIC,SAAS,GAAG,EAHhB;;AAKA,QAAMC,aAAa,GAAG,MAAM;AACxBF,IAAAA,WAAW,IAAIC,SAAf;AACA,UAAME,GAAG,GAAGZ,IAAI,CAACC,aAAL,CAAmBQ,WAAnB,EAAgCH,KAAhC,EAAuCE,MAAvC,EAA+CV,QAA/C,CAAZ;AACAF,IAAAA,OAAO,CAACW,UAAR,GAAqBK,GAArB;;AACA,QAAIH,WAAW,GAAGX,QAAlB,EAA4B;AACxBe,MAAAA,UAAU,CAACF,aAAD,EAAgBD,SAAhB,CAAV;AACH,KAFD,MAEO;AACH,UAAIX,YAAJ,EAAkBA,YAAY;AACjC;AACJ,GATD;;AAUAY,EAAAA,aAAa;AAChB,CAxBM","sourcesContent":["export const scrollTo = (element, to, duration, scrollToDone = null) => {\r\n    Math.easeInOutQuad = (t, b, c, d) => {\r\n        t /= d / 2;\r\n        if (t < 1) return c / 2 * t * t + b;\r\n        t--;\r\n        return -c / 2 * (t * (t - 2) - 1) + b;\r\n    };\r\n\r\n    let start = element.scrollLeft,\r\n        change = to - start,\r\n        currentTime = 0,\r\n        increment = 20;\r\n\r\n    const animateScroll = () => {\r\n        currentTime += increment;\r\n        const val = Math.easeInOutQuad(currentTime, start, change, duration);\r\n        element.scrollLeft = val;\r\n        if (currentTime < duration) {\r\n            setTimeout(animateScroll, increment);\r\n        } else {\r\n            if (scrollToDone) scrollToDone();\r\n        }\r\n    };\r\n    animateScroll();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}