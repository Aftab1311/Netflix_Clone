{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aftab\\\\Desktop\\\\netflixClone\\\\Netflix-Clone\\\\src\\\\components\\\\StaticPages\\\\ErrorPage\\\\ErrorPage.js\";\nimport React from 'react';\nimport './ErrorPage.css';\n/**\r\n * I have to check for error message or simply an error because of I've handled errors in the \r\n * reducers. The RTK documentation recommends checking for a promise rejection with value or \r\n * with an error; thus, when it rejects with value, there will be a status_message, and if that\r\n * doesn't happen, there will simply be an error object \r\n */\n\nconst ErrorPage = props => {\n  const errors = props.errors;\n  let errorObjs;\n\n  if (Array.isArray(errors)) {\n    errorObjs = errors[0] || errors[1] || errors[2];\n  }\n\n  const errorType = errorObjs || errors;\n  const errorMessage = errorType.message ? errorType.message : errorType;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ErrorPage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ErrorPage-Items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }\n  }, \"No matching tiles found.\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }\n  }, errorMessage)));\n};\n\nexport default ErrorPage;","map":{"version":3,"sources":["C:/Users/aftab/Desktop/netflixClone/Netflix-Clone/src/components/StaticPages/ErrorPage/ErrorPage.js"],"names":["React","ErrorPage","props","errors","errorObjs","Array","isArray","errorType","errorMessage","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AAEA;;;;;;;AAMA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AAAA,QACfC,MADe,GACJD,KADI,CACfC,MADe;AAGvB,MAAIC,SAAJ;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AACvBC,IAAAA,SAAS,GAAGD,MAAM,CAAC,CAAD,CAAN,IAAaA,MAAM,CAAC,CAAD,CAAnB,IAA0BA,MAAM,CAAC,CAAD,CAA5C;AACH;;AAED,QAAMI,SAAS,GAAGH,SAAS,IAAID,MAA/B;AACA,QAAMK,YAAY,GAAGD,SAAS,CAACE,OAAV,GAAoBF,SAAS,CAACE,OAA9B,GAAwCF,SAA7D;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,YAAL,CAFJ,CADJ,CADJ;AAQH,CAlBD;;AAoBA,eAAeP,SAAf","sourcesContent":["import React from 'react'\r\nimport './ErrorPage.css'\r\n\r\n/**\r\n * I have to check for error message or simply an error because of I've handled errors in the \r\n * reducers. The RTK documentation recommends checking for a promise rejection with value or \r\n * with an error; thus, when it rejects with value, there will be a status_message, and if that\r\n * doesn't happen, there will simply be an error object \r\n */\r\nconst ErrorPage = props => {\r\n    const { errors } = props\r\n\r\n    let errorObjs\r\n    if (Array.isArray(errors)) {\r\n        errorObjs = errors[0] || errors[1] || errors[2]\r\n    }\r\n\r\n    const errorType = errorObjs || errors\r\n    const errorMessage = errorType.message ? errorType.message : errorType\r\n    return (\r\n        <div className=\"ErrorPage\">\r\n            <div className=\"ErrorPage-Items\">\r\n                <h2>No matching tiles found.</h2>\r\n                <h2>{errorMessage}</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorPage"]},"metadata":{},"sourceType":"module"}